<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven />
    <!-- 
    	역할: 이 태그는 스프링의 @Controller 애너테이션을 사용하여 MVC 컨트롤러를 정의할 수 있도록 활성화합니다. 이 설정을 통해 컨트롤러 메서드에 @RequestMapping 을 사용하여 HTTP 요청을 처리할 수 있습니다.
		주요 기능: 애플리케이션의 각 요청을 해당하는 컨트롤러로 매핑하고, 데이터 바인딩, 유효성 검사, 포맷팅 등의 기능을 제공합니다.
     -->

    <!-- Handles HTTP GET requests for /resources/ by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/" />
    <!-- 
    	역할: resources 태그는 애플리케이션에서 정적 리소스 (이미지, CSS, JavaScript 파일 등) 를 처리하는 방법을 정의합니다.
		mapping="/resources/": /resources/ 경로 하위에 있는 모든 파일을 정적 리소스로 처리합니다.
		location="/resources/": 실제 파일이 위치한 경로를 지정합니다. 여기서는 웹 애플리케이션의 src/main/webapp/resources 디렉토리에서 리소스를 제공합니다.
		주요 기능: 정적 파일을 효율적으로 제공하여 클라이언트가 빠르게 접근할 수 있도록 합니다.
     -->

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>
    <!-- 
    	역할: InternalResourceViewResolver 는 뷰 리졸버로, 컨트롤러가 반환하는 뷰 이름을 기반으로 실제 JSP 파일을 찾는 역할을 합니다.
		prefix="/WEB-INF/views/": 뷰 파일들이 위치하는 디렉토리의 경로를 지정합니다. 여기서는 WEB-INF/views/ 디렉토리에서 JSP 파일을 찾습니다.
		suffix=".jsp": 뷰 이름 뒤에 붙는 확장자를 정의합니다. 여기서는 .jsp 확장자를 사용합니다.
		주요 기능: 예를 들어, 컨트롤러에서 "home" 이라는 뷰 이름을 반환하면, InternalResourceViewResolver 는 /WEB-INF/views/home.jsp 파일을 찾아 렌더링합니다.
     -->
     
    <context:component-scan base-package="org.ihm.portfolio.main" />
    <context:component-scan base-package="org.ihm.portfolio.subMain" />
    <!-- 
    	역할: component-scan 태그는 지정된 패키지에서 스프링 빈으로 등록된 컴포넌트, 서비스, 컨트롤러들을 자동으로 스캔하고 등록하는 기능을 제공합니다.
		base-package="org.ihm.portfolio.front": 이 옵션은 org.ihm.portfolio.front 패키지를 스캔하여 해당 패키지 내의 모든 클래스에서 @Controller, @Service, @Repository 애너테이션이 붙은 클래스들을 자동으로 스프링 빈으로 등록합니다.
		주요 기능: 애플리케이션에서 필요한 빈들을 설정 파일에 하나하나 정의하지 않고, 패키지 내의 애너테이션이 붙은 클래스들을 자동으로 등록해 개발 효율성을 높입니다.
     -->
    
</beans:beans>
